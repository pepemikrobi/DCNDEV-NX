# Here a .gitlab-ci-build-images.yml file is included
# It provides build_image and push_image jobs in the build stage
include:
  - project: $CI_PROJECT_PATH
    ref: main
    file: .gitlab-ci-build-images.yml

# Here an object cache is created to store .terraform sub-folder contents
# between container runs. With that, Terraform initialization 
# and the providers and modules downloaded will be persistent between runs
# In this case the cache is stored locally in the runnner where
# the container was executed
.dependencies_cache:
  cache:
    key: TF_NETASCODE
    paths:
      - "TF_NETASCODE/.terraform"
    policy: pull

# A new validate stage has been added
stages:
  - build
  - validate
  - plan
  - apply

# The tf_validate job in validate stage is used to check the HCL syntax
tf_validate:
  stage: validate
  # The Docker image is required, the tag selects the docker runner
  # and the Docker image name is also provided
  needs:
    - push_image
  tags:
    - docker
  image: $IMAGE_NAME_ACI:$IMAGE_TAG_ACI
  # Here the reference to the cache is used
  extends: .dependencies_cache
  cache:
    policy: pull-push
  # Before the main script starts a Terraform initialization is performed
  before_script:
    - echo $CI_PIPELINE_SOURCE
    - echo $CI_COMMIT_BRANCH
    - cd TF_NETASCODE
    - pwd
    - chmod +x .init.sh
    - ./.init.sh
  # The main script here just invokes terraform validate
  script:
    - terraform validate
  # The job should only start when the pipeline trigger is push
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"

# The tf_validate job in validate stage is used to check the HCL syntax
tf_plan:
  stage: plan
  # The Docker image is required, the tag selects the docker runner
  # and the Docker image name is also provided
  needs:
    - push_image
  tags:
    - docker
  image: $IMAGE_NAME_ACI:$IMAGE_TAG_ACI
  # Here the reference to the cache is used
  extends: .dependencies_cache
  cache:
    policy: pull-push
  # Before the main script starts a Terraform initialization is performed
  # And the Terraform shell variables are set based on GitLab variables
  before_script:
    - echo $CI_PIPELINE_SOURCE
    - echo $CI_COMMIT_BRANCH
    - cd TF_NETASCODE
    - pwd
    - chmod +x .init.sh
    - ./.init.sh
    - export TF_VAR_aci_username=${ACI_USERNAME}
    - export TF_VAR_aci_password=${ACI_PASSWORD}
    - export TF_VAR_aci_url=${ACI_URL}
  # The main script here just invokes terraform plan
  # Save output to the file and then display
  script:
    - terraform plan -out ./output.tfplan
    - terraform show ./output.tfplan

  # The job should only start when the pipeline trigger is a MR to either procuction or main
  # or the trigger is a commit to production or main
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && ($CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "production" || $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main")
    - if: $CI_PIPELINE_SOURCE == "push" && ($CI_COMMIT_BRANCH == "production" || $CI_COMMIT_BRANCH == "main")


  # The tf_apply job in apply stage is used to apply the changes
tf_apply:
  stage: apply
  # The Docker image is required, the tag selects the docker runner
  # and the Docker image name is also provided
  needs:
    - tf_plan
  tags:
    - docker
  image: $IMAGE_NAME_ACI:$IMAGE_TAG_ACI
  # Here the reference to the cache is used
  extends: .dependencies_cache
  cache:
    policy: pull-push
  # Before the main script starts a Terraform initialization is performed
  # And the Terraform shell variables are set based on GitLab variables
  before_script:
    - echo $CI_PIPELINE_SOURCE
    - echo $CI_COMMIT_BRANCH
    - cd TF_NETASCODE
    - pwd
    - chmod +x .init.sh
    - ./.init.sh
    - export TF_VAR_aci_username=${ACI_USERNAME}
    - export TF_VAR_aci_password=${ACI_PASSWORD}
    - export TF_VAR_aci_url=${ACI_URL}
  # The main script here just invokes terraform plan
  # Save output to the file and then display
  script:
    - terraform apply -auto-approve

  # Generate artifacts based on plan output file
  artifacts:
    paths:
      - "./TF_NETASCODE/output.tfplan"
    untracked: false
    when: on_success
    expire_in: 30 days
  # The job should only start when the pipeline trigger is a commit to production branch with a tag attached
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "production" && $CI_COMMIT_TAG =~ /.*/
      when: manual

